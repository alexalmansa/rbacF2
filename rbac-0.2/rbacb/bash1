#!/bin/bash

function llegeixConfig()
{
  if [ -f "$CONFIG/$rol" ]       #si no esta configuracio, entorn no existeix i cal crearlo
    then

        i=0
        while read -r line; do
            case "$i" in
                0)
                    IFS=',' read -r -a arrayProgrames <<< "$line"
                    ;;
                1)
                    direccioBashrc="$line"
                    ;;
                2)
                    tempsEntorn="$line"
                    ;;
                3)
                    tempsHome="$line"
                    ;;
                4)
                    publishPorts="$line"
                    ;;
                5)
                    exposedPorts="$line"
                    ;;
                6)
                    bridged="$line"
                    ;;
                7)
                    cpu="$line"
                    ;;
                8)
                    cpuShares="$line"
                    ;;
                9)
                    memFisica="$line"
                    ;;
                10)
                    memSwap="$line"
                    ;;

                *)
                    ;;
            esac
            i=$((i+1))

        done < "$CONFIG/$rol"
    else

        echo "$CONFIG/$rol"
        echo "Error, no existeix el fitxer configuracio del rol: $conf"
        exit
    fi
}

function llegeixDirConfig()
{
    if [ ! -f "$CONFIGBASE/configuracio" ]        #si no esta configuracio, entorn no existeix i cal crearlo
    then
        echo "Fitxer de configuració base inexistent"
    fi

    i=0
    while read -r line; do
        case "$i" in
            0)
                CONFIG="$line"
                ;;
            1)
                PORTroot="$line"
                ;;
            2)
                PORTmail="$line"
                ;;
            3)
                MAIL="$line"
                ;;
            4)
                DIRENTORN="$line"
                ;;
            5)
                FACILITY="$line"
                ;;

            *)
                ;;
        esac
        i=$((i+1))
    done < "$CONFIGBASE/configuracio"
}

function limitatempsEntorn()
{
    case "$tempsEntorn" in

        persistent)
            ;;

        connexio)
            borra=1
            ;;

        *)
            docker rm "$USER" | at 00:00 AM today + $tempsEntorn &>/dev/null
            ;;

    esac
}

function limitatempsHome()
{
    if [ "$tempsHome" != "persistent" ]; then
        bash $JAIL/home/$user/.envia.sh borraHome &>/dev/null | at 00:00 AM today + $tempsHome &>/dev/null
    fi
}


#COMENÇA SCRIPT
#----------------------------
borra=0
fraseGroups="groups $user"
grups="$($fraseGroups)"
array=( $grups )
rol="${array[2]}"


CONFIG=/data/users/config
CONFIGBASE=/data/users


llegeixConfig
llegeixDirConfig

if [ ! "$(docker network ls | grep $bridged)" ]; then
    docker network create -d bridge "$bridged"
fi

cp="$(nproc)"
if [ "$cp" != 2 ]; then
    cpu=$(echo $cpu*$cp | bc)
    cpu=$(echo $cpu/2 | bc)
fi

if (( $(echo "$cp <  $cpu" |bc -l) )); then
  echo "Error, there isn't enough CPU!"
else

    if [ ! "$(docker ps -a | grep $USER)" ]; then
        case "$USER" in
            "datastore")
                docker create -i -t --user "$USER" --name="$USER" -m "$memFisica" --memory-swap "$memSwap" --limit-cpu "$cpu" --cpu-shares "$cpuShares" --network "$bridged" datastore /bin/bash
            ;;

            "visitor")
                docker create -i -t --user "$USER" --name="$USER" -m "$memFisica" --memory-swap "$memSwap" --limit-cpu "$cpu" --cpu-shares "$cpuShares" --network "$bridged" visitor /bin/bash
            ;;

            *)
                docker create -i -t --user "$USER" --name="$USER" -p "$exposedPorts"  -m "$memFisica" --memory-swap "$memSwap" --limit-cpu "$cpu" --cpu-shares "$cpuShares" --network "$bridged" "$rol" /bin/bash
            ;;

        esac

        echo "Docker Create: Docker container for $USER of $rol created" >> /var/log/rbac/docker.log
        logger -f /var/log/rbac/docker.log -p "$FACILITY"

        echo "NO EXISTEIX"
        docker cp -a /data/users/config/carpeta  "$USER":/home/"$USER"/                 #Creo home
        echo "Docker CP: Copied new home for $USER of $rol" >> /var/log/rbac/docker.log
        logger -f /var/log/rbac/docker.log -p "$FACILITY"


        docker cp -a /etc/passwd "$USER":/etc/passwd                                    #Copio fitxer passwd
        echo "Docker CP: Copied new passwd file for $USER of $rol" >> /var/log/rbac/docker.log
        logger -f /var/log/rbac/docker.log -p "$FACILITY"

    else
        echo "EXISTEIX"
        echo "Docker Info: Container for $USER of $rol already exists. Starting it..." >> /var/log/rbac/docker.log
        logger -f /var/log/rbac/docker.log -p "$FACILITY"
    fi

fi

docker start "$USER"
echo "Docker Start: Started Docker container for $USER of $rol" >> /var/log/rbac/docker.log
logger -f /var/log/rbac/docker.log -p "$FACILITY"


docker exec -u 0 -it "$USER" whoami



echo "Docker Attach: Attached Docker container for $USER of $rol" >> /var/log/rbac/docker.log
logger -f /var/log/rbac/docker.log -p "$FACILITY"

docker attach "$USER"


if [ "$borra" == 1 ]; then
  docker rm "$USER"
fi 






#docker exec  -it "$USER" cd
#docker cp -a  /data/users/config/carpeta/.bashrc  "$USER":/home/"$USER"/.bashrc

#Limitar memoria fisica i swap==  -m i --memory-swap
#Limitar CPU -c 512/1024/...  --cpu-shares

#mv mediumImage "$USER"
#chown -R "$USER" "$USER"
#source /home/.bashrc
